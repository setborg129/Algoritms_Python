"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для пятого скрипта
"""


from pympler.asizeof import asizeof


class Road:

    def __init__(self, length, width):
        self._length = length
        self._width = width

    def total_mass(self, thickness):
        total_mass = (self._length * self._width * 25 * thickness) // 1000
        return f'{self._length} м*{self._width} м*25 кг*{thickness} см = {total_mass} т'


class RoadSlots:

    __slots__ = ('_length', '_width')

    def __init__(self, length, width):
        self._length = length
        self._width = width

    def total_mass(self, thickness):
        total_mass = (self._length * self._width * 25 * thickness) // 1000
        return f'{self._length} м*{self._width} м*25 кг*{thickness} см = {total_mass} т'


if __name__ == '__main__':
    print(f"Размер объекта без использования слотов: {asizeof(Road(40, 10000))}")
    print(f"Размер объекта с использованием слотов: {asizeof(RoadSlots(40, 10000))}")

# Для оптимизации памяти было реализовано хранение атрибутов класса в кортеже
# с помощью конструкции __slots__.
# По результатам тестирования удалось добиться оптимизации памяти.
